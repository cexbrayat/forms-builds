{"version":3,"file":"form_control_name.js","sourceRoot":"","sources":["../../../../../../../packages/forms/src/directives/reactive_directives/form_control_name.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {_ngModelWarning, composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {NG_MODEL_WITH_FORM_CONTROL_WARNING} from './form_control_directive';\nimport {FormGroupDirective} from './form_group_directive';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const controlNameBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlName)\n};\n\n/**\n * @description\n *\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * This directive ensures that any values written to the `FormControl`\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * `FormControl` instance (view -> model).\n *\n * @usageNotes\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the `FormControl` instance you want to\n * link, and will look for a `FormControl` registered with that name in the\n * closest `FormGroup` or `FormArray` above it.\n *\n * **Access the control**: You can access the `FormControl` associated with\n * this directive by using the {@link AbstractControl#get get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the `FormControl`.\n * See a full list of available properties in `AbstractControl`.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  `FormControl`, or you can set it programmatically later using\n *  {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\" [(ngModel)]=\"value\">\n * </form>\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\">\n * </form>\n * ```\n *\n * ```ts\n * this.form.get('first').setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * @ngModule ReactiveFormsModule\n */\n@Directive({selector: '[formControlName]', providers: [controlNameBinding]})\nexport class FormControlName extends NgControl implements OnChanges, OnDestroy {\n  private _added = false;\n  /** @internal */\n  viewModel: any;\n  // TODO(issue/24571): remove '!'.\n  readonly control !: FormControl;\n\n  // TODO(issue/24571): remove '!'.\n  @Input('formControlName') name !: string;\n\n  @Input('disabled')\n  set isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n\n  // TODO(kara): remove next 4 properties once deprecation period is over\n\n  /** @deprecated as of v6 */\n  @Input('ngModel') model: any;\n\n  /** @deprecated as of v6 */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  /**\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlName. Used to support warning config of \"once\".\n   *\n   * @internal\n   */\n  static _ngModelWarningSentOnce = false;\n\n  /**\n   * Instance property used to track whether an ngModel warning has been sent out for this\n   * particular FormControlName instance. Used to support warning config of \"always\".\n   *\n   * @internal\n   */\n  _ngModelWarningSent = false;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: Array<Validator|ValidatorFn>,\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators:\n          Array<AsyncValidator|AsyncValidatorFn>,\n      @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\n      @Optional() @Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING) private _ngModelWarningConfig: string|\n      null) {\n    super();\n    this._parent = parent;\n    this._rawValidators = validators || [];\n    this._rawAsyncValidators = asyncValidators || [];\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._added) this._setUpControl();\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n      this.viewModel = this.model;\n      this.formDirective.updateModel(this, this.model);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeControl(this);\n    }\n  }\n\n  viewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  get path(): string[] { return controlPath(this.name, this._parent !); }\n\n  get formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n\n  get validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n\n  get asyncValidator(): AsyncValidatorFn {\n    return composeAsyncValidators(this._rawAsyncValidators) !;\n  }\n\n  private _checkParentType(): void {\n    if (!(this._parent instanceof FormGroupName) &&\n        this._parent instanceof AbstractFormGroupDirective) {\n      ReactiveErrors.ngModelGroupException();\n    } else if (\n        !(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n        !(this._parent instanceof FormArrayName)) {\n      ReactiveErrors.controlParentException();\n    }\n  }\n\n  private _setUpControl() {\n    this._checkParentType();\n    (this as{control: FormControl}).control = this.formDirective.addControl(this);\n    if (this.control.disabled && this.valueAccessor !.setDisabledState) {\n      this.valueAccessor !.setDisabledState !(true);\n    }\n    this._added = true;\n  }\n}\n"]}