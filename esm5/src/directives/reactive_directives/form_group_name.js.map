{"version":3,"file":"form_group_name.js","sourceRoot":"","sources":["../../../../../../../packages/forms/src/directives/reactive_directives/form_group_name.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormArray} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath} from '../shared';\nimport {AsyncValidatorFn, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\n\nexport const formGroupNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName)\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormGroup` you want to link, and\n * will look for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * **Access the group**: You can access the associated `FormGroup` using the\n * {@link AbstractControl#get get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormGroup`. See a full list of available properties in `AbstractControl`.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the `FormGroup`, or you can set it programmatically later using\n * {@link AbstractControl#setValue setValue} or {@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * * **npm package**: `@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n *\n */\n@Directive({selector: '[formGroupName]', providers: [formGroupNameProvider]})\nexport class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  @Input('formGroupName') name !: string;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  /** @internal */\n  _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.groupParentException();\n    }\n  }\n}\n\nexport const formArrayNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName)\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * **Access the array**: You can access the associated `FormArray` using the\n * {@link AbstractControl#get get} method on the parent `FormGroup`.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * `FormArray`. See a full list of available properties in `AbstractControl`.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the `FormArray`, or you can set the value programmatically later using the\n * `FormArray`'s {@link AbstractControl#setValue setValue} or\n * {@link AbstractControl#patchValue patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the `FormArray`'s {@link AbstractControl#valueChanges valueChanges} event.\n * You can also listen to its {@link AbstractControl#statusChanges statusChanges} event to be\n * notified when the validation status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the `FormArray` dynamically by calling\n * its {@link FormArray#push push} method.\n * Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * * **npm package**: `@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n *\n */\n@Directive({selector: '[formArrayName]', providers: [formArrayNameProvider]})\nexport class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n  /** @internal */\n  _parent: ControlContainer;\n\n  /** @internal */\n  _validators: any[];\n\n  /** @internal */\n  _asyncValidators: any[];\n\n  // TODO(issue/24571): remove '!'.\n  @Input('formArrayName') name !: string;\n\n  constructor(\n      @Optional() @Host() @SkipSelf() parent: ControlContainer,\n      @Optional() @Self() @Inject(NG_VALIDATORS) validators: any[],\n      @Optional() @Self() @Inject(NG_ASYNC_VALIDATORS) asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  ngOnInit(): void {\n    this._checkParentType();\n    this.formDirective !.addFormArray(this);\n  }\n\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormArray(this);\n    }\n  }\n\n  get control(): FormArray { return this.formDirective !.getFormArray(this); }\n\n  get formDirective(): FormGroupDirective|null {\n    return this._parent ? <FormGroupDirective>this._parent.formDirective : null;\n  }\n\n  get path(): string[] { return controlPath(this.name, this._parent); }\n\n  get validator(): ValidatorFn|null { return composeValidators(this._validators); }\n\n  get asyncValidator(): AsyncValidatorFn|null {\n    return composeAsyncValidators(this._asyncValidators);\n  }\n\n  private _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.arrayParentException();\n    }\n  }\n}\n\nfunction _hasInvalidParent(parent: ControlContainer): boolean {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n      !(parent instanceof FormArrayName);\n}\n"]}