{"version":3,"file":"abstract_control_directive.js","sourceRoot":"","sources":["../../../../../packages/forms/src/directives/abstract_control_directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {AbstractControl} from '../model';\nimport {ValidationErrors} from './validators';\n\n/**\n * Base class for control directives.\n *\n * Only used internally in the forms module.\n *\n *\n */\nexport abstract class AbstractControlDirective {\n  /**\n   * The `FormControl`, `FormGroup`, or `FormArray`\n   * that backs this directive. Most properties fall through to that\n   * instance.\n   */\n  abstract get control(): AbstractControl|null;\n\n  /** The value of the control. */\n  get value(): any { return this.control ? this.control.value : null; }\n\n  /**\n   * A control is `valid` when its `status === VALID`.\n   *\n   * In order to have this status, the control must have passed all its\n   * validation checks.\n   */\n  get valid(): boolean|null { return this.control ? this.control.valid : null; }\n\n  /**\n   * A control is `invalid` when its `status === INVALID`.\n   *\n   * In order to have this status, the control must have failed\n   * at least one of its validation checks.\n   */\n  get invalid(): boolean|null { return this.control ? this.control.invalid : null; }\n\n  /**\n   * A control is `pending` when its `status === PENDING`.\n   *\n   * In order to have this status, the control must be in the\n   * middle of conducting a validation check.\n   */\n  get pending(): boolean|null { return this.control ? this.control.pending : null; }\n\n  /**\n   * A control is `disabled` when its `status === DISABLED`.\n   *\n   * Disabled controls are exempt from validation checks and\n   * are not included in the aggregate value of their ancestor\n   * controls.\n   */\n  get disabled(): boolean|null { return this.control ? this.control.disabled : null; }\n\n  /**\n   * A control is `enabled` as long as its `status !== DISABLED`.\n   *\n   * In other words, it has a status of `VALID`, `INVALID`, or\n   * `PENDING`.\n   */\n  get enabled(): boolean|null { return this.control ? this.control.enabled : null; }\n\n  /**\n   * Returns any errors generated by failing validation. If there\n   * are no errors, it will return null.\n   */\n  get errors(): ValidationErrors|null { return this.control ? this.control.errors : null; }\n\n  /**\n   * A control is `pristine` if the user has not yet changed\n   * the value in the UI.\n   *\n   * Note that programmatic changes to a control's value will\n   * *not* mark it dirty.\n   */\n  get pristine(): boolean|null { return this.control ? this.control.pristine : null; }\n\n  /**\n   * A control is `dirty` if the user has changed the value\n   * in the UI.\n   *\n   * Note that programmatic changes to a control's value will\n   * *not* mark it dirty.\n   */\n  get dirty(): boolean|null { return this.control ? this.control.dirty : null; }\n\n  /**\n   * A control is marked `touched` once the user has triggered\n   * a `blur` event on it.\n   */\n  get touched(): boolean|null { return this.control ? this.control.touched : null; }\n\n  get status(): string|null { return this.control ? this.control.status : null; }\n\n  /**\n   * A control is `untouched` if the user has not yet triggered\n   * a `blur` event on it.\n   */\n  get untouched(): boolean|null { return this.control ? this.control.untouched : null; }\n\n  /**\n   * Emits an event every time the validation status of the control\n   * is re-calculated.\n   */\n  get statusChanges(): Observable<any>|null {\n    return this.control ? this.control.statusChanges : null;\n  }\n\n  /**\n   * Emits an event every time the value of the control changes, in\n   * the UI or programmatically.\n   */\n  get valueChanges(): Observable<any>|null {\n    return this.control ? this.control.valueChanges : null;\n  }\n\n  /**\n   * Returns an array that represents the path from the top-level form\n   * to this control. Each index is the string name of the control on\n   * that level.\n   */\n  get path(): string[]|null { return null; }\n\n  /**\n   * Resets the form control. This means by default:\n   *\n   * * it is marked as `pristine`\n   * * it is marked as `untouched`\n   * * value is set to null\n   *\n   * For more information, see `AbstractControl`.\n   */\n  reset(value: any = undefined): void {\n    if (this.control) this.control.reset(value);\n  }\n\n  /**\n   * Returns true if the control with the given path has the error specified. Otherwise\n   * returns false.\n   *\n   * If no path is given, it checks for the error on the present control.\n   */\n  hasError(errorCode: string, path?: string[]): boolean {\n    return this.control ? this.control.hasError(errorCode, path) : false;\n  }\n\n  /**\n   * Returns error data if the control with the given path has the error specified. Otherwise\n   * returns null or undefined.\n   *\n   * If no path is given, it checks for the error on the present control.\n   */\n  getError(errorCode: string, path?: string[]): any {\n    return this.control ? this.control.getError(errorCode, path) : null;\n  }\n}\n"]}